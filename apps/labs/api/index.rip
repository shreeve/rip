import { Hono } from 'hono'
import { read, withHelpers } from '@rip/api'

# Simple ping - the classic
get '/ping', -> 'pong'

# Parameterized greeting
get '/hello', -> "Hello, #{read('name', 'string') or 'World'}! 👋"

# Email validation with ternary
get '/email', ->
  email = read 'email', 'email'

  if email
    { valid: true, email, message: "#{email} looks good!" }
  else
    { valid: false, message: 'Please provide a valid email (e.g., ?email=test@example.com)' }

# Calculator with pattern matching
get '/calc', ->
  a  = read 'a' , 'decimal'
  b  = read 'b' , 'decimal'
  op = read 'op', 'string' or 'add'

  result = switch op
    when 'add' then a + b
    when 'sub' then a - b
    when 'mul' then a * b
    when 'div' then b isnt 0 and a / b or 'Cannot divide by zero!'
    else 'Unknown operation'

  { a, b, operation: op, result }

# Mock user data
get '/user', -> { name: 'larry', role: 'admin', timestamp: Date.now() }

# Phone formatting with Rip regex features
get '/format-phone', ->
  phone = read 'phone', 'string'
  phone and {
    original: phone
    formatted: phone[/\d/g]?.replace(/(\d{3})(\d{3})(\d{4})/, '($1) $2-$3') or phone
  } or { error: 'Please provide a phone number (e.g., ?phone=1234567890)' }

# Age categorization
get '/age-check', ->
  age = read 'age', 'whole'
  age and {
    age
    status: age >= 21 and 'adult' or age >= 13 and 'teen' or 'child'
    canVote: age >= 18
    canDrink: age >= 21
  } or { error: 'Please provide your age (e.g., ?age=25)' }

# Username validation with Rip regex matching
get '/username', ->
  username = read 'username', 'string'
  username and {
    username
    valid: username.length >= 3 and !!(username =~ /^[a-zA-Z0-9_]+$/)
    length: username.length
  } or { error: 'Please provide a username (e.g., ?username=john_doe)' }

# User creation endpoint
post '/create-user', ->
  name  = read 'name', 'string'
  email = read 'name', 'email'
  age   = read 'name', 'whole'

  (name and email and age) and {
    success: true
    user: { id: Math.floor(Math.random() * 1000), name, email, age }
    message: 'User created successfully!'
  } or {
    success: false
    error: 'Missing required fields: name, email, age'
    received: { name, email, age }
  }

# Interactive test page
get '/test', -> """<!DOCTYPE html>
<html><head><meta charset="UTF-8"><title>🔥 Rip Labs API Test</title><style>
body{font-family:system-ui;max-width:900px;margin:0 auto;padding:20px;background:#1a1a2e;color:white;}
.endpoint{background:#16213e;padding:15px;margin:10px 0;border-radius:6px;border:1px solid #333;}
.endpoint h3{margin:0 0 8px 0;color:#ffeb3b;font-size:1.1em;}
button{background:#4CAF50;color:white;border:none;padding:8px 16px;border-radius:4px;cursor:pointer;margin:4px;}
button:hover{background:#45a049;}
.result{background:#0f0f23;padding:12px;margin-top:8px;border-radius:4px;white-space:pre-wrap;font-family:monospace;font-size:12px;display:none;}
.status{text-align:center;padding:15px;font-size:1.2em;}
.success{color:#4CAF50;} .error{color:#f44336;}
.url{font-family:monospace;background:#000;padding:6px;border-radius:3px;margin:6px 0;font-size:13px;}
</style></head><body>
<h1>🔥 Rip Labs API Test Suite</h1>
<div class="status" id="status">🔒 Testing connection...</div>

<div class="endpoint">
<h3>🏓 Ping</h3><div class="url">GET /ping</div>
<button onclick="test('/ping','ping-result')">Test</button>
<div id="ping-result" class="result"></div>
</div>

<div class="endpoint">
<h3>👋 Hello</h3><div class="url">GET /hello?name=Rip</div>
<button onclick="test('/hello?name=Rip','hello-result')">Test</button>
<div id="hello-result" class="result"></div>
</div>

<div class="endpoint">
<h3>🧮 Calculator</h3><div class="url">GET /calc?a=15&b=3&op=div</div>
<button onclick="test('/calc?a=15&b=3&op=div','calc-result')">Test</button>
<div id="calc-result" class="result"></div>
</div>

<div class="endpoint">
<h3>📧 Email</h3><div class="url">GET /email?email=dev@rip-lang.org</div>
<button onclick="test('/email?email=dev@rip-lang.org','email-result')">Test</button>
<div id="email-result" class="result"></div>
</div>

<div class="endpoint">
<h3>👤 User</h3><div class="url">GET /user</div>
<button onclick="test('/user','user-result')">Test</button>
<div id="user-result" class="result"></div>
</div>

<div class="endpoint">
<h3>📊 Server Status</h3><div class="url">GET /status</div>
<button onclick="test('/status','status-result')">Test</button>
<div id="status-result" class="result"></div>
</div>

<div class="endpoint">
<h3>🚀 Run All Tests</h3>
<button onclick="testAll()" style="background:#ff9800;font-size:14px;padding:12px 24px;">Run All</button>
</div>

<script>
fetch('/ping').then(r => r.ok ?
  document.getElementById('status').innerHTML = '✅ <span class="success">Server Online!</span>' :
  document.getElementById('status').innerHTML = '❌ <span class="error">Server Error</span>'
).catch(() => document.getElementById('status').innerHTML = '❌ <span class="error">Connection Failed</span>');

async function test(path, resultId) {
  const div = document.getElementById(resultId);
  div.style.display = 'block';
  div.textContent = 'Loading...';
  try {
    const start = Date.now();
    const response = await fetch(path);
    const time = Date.now() - start;
    const text = await response.text();
    let result = text;
    try { result = JSON.stringify(JSON.parse(text), null, 2); } catch {}
    div.textContent = `${response.status} ${response.statusText} (${time}ms)\\n\\n${result}`;
  } catch (error) {
    div.textContent = `Error: ${error.message}`;
  }
}

async function testAll() {
  const tests = [
    ['/ping', 'ping-result'],
    ['/hello?name=Rip', 'hello-result'],
    ['/calc?a=15&b=3&op=div', 'calc-result'],
    ['/email?email=dev@rip-lang.org', 'email-result'],
    ['/user', 'user-result'],
    ['/status', 'status-result']
  ];
  for (const [path, resultId] of tests) {
    await test(path, resultId);
    await new Promise(r => setTimeout(r, 150));
  }
}
</script></body></html>"""

# Create app and apply helpers (this processes the queued routes)
export default withHelpers new Hono