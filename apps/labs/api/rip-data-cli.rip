# 🔥 RipData CLI - Interactive REPL for DuckDB
# Connect to your revolutionary data server or direct file access

import { RipDataClient } from '@rip/data'
import { Database } from 'duckdb'

# Parse command line arguments
args = process.argv.slice(2)
mode = args[0] || 'server'

if mode == 'server'
  console.log '🔥 RipData CLI - Server Mode'
  console.log 'Connecting to http://localhost:8306...'

  client = new RipDataClient 'http://localhost:8306'

  # Test connection
  try
    health = client.health!
    console.log '✅ Connected successfully!'
    console.log '📊 Server status:', health.status
  catch error
    console.log '❌ Connection failed:', error.message
    console.log '💡 Make sure rip-data-server is running: bun run data:start'
    process.exit(1)

  console.log ''
  console.log '🎯 Interactive RipData REPL'
  console.log 'Type SQL queries and press Enter. Type .exit to quit.'
  console.log 'Examples:'
  console.log '  SELECT COUNT(*) FROM users;'
  console.log '  SELECT * FROM orders ORDER BY createdAt DESC LIMIT 5;'
  console.log '  .tables'
  console.log '  .schema users'
  console.log ''

  # Simple REPL loop
  readline = require 'readline'
  rl = readline.createInterface
    input: process.stdin
    output: process.stdout
    prompt: 'ripdata> '

  rl.prompt()

  rl.on 'line', (input) ->
    query = input.trim()

    if query == '.exit'
      console.log '👋 Goodbye!'
      process.exit(0)

    if query == '.tables'
      query = "SELECT table_name FROM information_schema.tables WHERE table_schema = 'main'"

    if query.startsWith('.schema ')
      tableName = query.split(' ')[1]
      query = "DESCRIBE #{tableName}"

    if query == ''
      rl.prompt()
      return

    try
      if query.toLowerCase().startsWith('select') or query.toLowerCase().startsWith('with') or query.toLowerCase().startsWith('describe') or query.includes('information_schema')
        # Read query
        result = client.query! query

        if result.length == 0
          console.log '(no rows)'
        else
          console.table result
      else
        # Write query
        result = client.execute! query
        console.log "✅ Query executed successfully"
        if result.length > 0
          console.table result
    catch error
      console.log '❌ Error:', error.message

    rl.prompt()

  rl.on 'close', ->
    console.log '👋 Goodbye!'
    process.exit(0)

else if mode == 'direct'
  console.log '🔥 RipData CLI - Direct File Mode'
  dbPath = args[1] || './db/labs.duckdb'
  console.log "Connecting to #{dbPath}..."

  try
    db = new Database dbPath
    conn = db.connect()
    console.log '✅ Connected successfully!'
  catch error
    console.log '❌ Connection failed:', error.message
    process.exit(1)

  console.log ''
  console.log '🎯 Interactive DuckDB REPL (Direct File Access)'
  console.log 'Type SQL queries and press Enter. Type .exit to quit.'
  console.log ''

  readline = require 'readline'
  rl = readline.createInterface
    input: process.stdin
    output: process.stdout
    prompt: 'duckdb> '

  rl.prompt()

  rl.on 'line', (input) ->
    query = input.trim()

    if query == '.exit'
      conn.close()
      db.close()
      console.log '👋 Goodbye!'
      process.exit(0)

    if query == '.tables'
      query = "SHOW TABLES"

    if query.startsWith('.schema ')
      tableName = query.split(' ')[1]
      query = "DESCRIBE #{tableName}"

    if query == ''
      rl.prompt()
      return

    try
      conn.all query, (err, result) ->
        if err
          console.log '❌ Error:', err.message
        else
          if result.length == 0
            console.log '(no rows)'
          else
            console.table result
        rl.prompt()
    catch error
      console.log '❌ Error:', error.message
      rl.prompt()

  rl.on 'close', ->
    conn.close()
    db.close()
    console.log '👋 Goodbye!'
    process.exit(0)

else
  console.log '🔥 RipData CLI - Revolutionary DuckDB Interface'
  console.log ''
  console.log 'Usage:'
  console.log '  bun rip-data-cli.rip server              # Connect to rip-data-server (default)'
  console.log '  bun rip-data-cli.rip direct              # Direct file access'
  console.log '  bun rip-data-cli.rip direct /path/to.db  # Direct file access with custom path'
  console.log ''
  console.log 'Examples:'
  console.log '  bun rip-data-cli.rip                     # Interactive server REPL'
  console.log '  bun rip-data-cli.rip direct              # Interactive file REPL'
  console.log ''
  console.log '🎯 Available commands in REPL:'
  console.log '  .tables      - List all tables'
  console.log '  .schema NAME - Show table schema'
  console.log '  .exit        - Exit REPL'
  console.log ''
  console.log '🔥 Connect with any SQL query!'
  process.exit(0)