// Generated by Rip 3.0.0
var autoRun, getJS, load, processAllRipScripts, processRipScript, run;

// browser.rip - Complete browser API for Rip
// Provides both manual API and automatic <script type="text/rip"> tag processing
// Works in: Bun, browsers, Deno, and Node.js
import { compile as ripCompile } from './rip.js';

// Simple helper to extract JS string from compile result
getJS = function(result) {
  if (typeof result === 'string') {
    return result;
  } else {
    return result.js;
  }
};

// ==============================================================================
// Manual API - Programmatic control
// ==============================================================================

// Compile Rip source to JavaScript string
export var compile = function(code, options = {}) {
  return getJS(ripCompile(code, Object.assign({
    bare: true
  }, options)));
};

// Run Rip code directly
run = function(code, options = {}) {
  var js;
  js = compile(code, options);
  return (new Function(js))();
};

// Load and run a .rip file from URL
load = async function(url, options = {}) {
  var code, response;
  // Use Bun.file if available (faster), otherwise fetch
  if (typeof Bun !== 'undefined' && (Bun.file != null)) {
    code = (await Bun.file(url).text());
  } else {
    response = (await fetch(url));
    code = (await response.text());
  }
  return run(code, Object.assign({
    filename: url
  }, options));
};

// ==============================================================================
// Auto-Processing API - <script type="text/rip"> tags
// ==============================================================================

// Process a single <script type="text/rip"> tag
processRipScript = function(script) {
  var error, globalEval, js, options, source;
  try {
    // Get the Rip source code
    source = script.textContent || script.innerText;
    if (!source.trim()) {
      return;
    }
    // Compile to JavaScript
    options = {
      bare: true,
      filename: script.getAttribute('data-filename') || 'inline.rip',
      sourceMap: false
    };
    js = getJS(ripCompile(source, options));
    // Execute the compiled JavaScript in global scope
    globalEval = eval;
    return globalEval.call(window, js);
  } catch (error1) {
    error = error1;
    console.error("Error in <script type=\"text/rip\">:", error);
    throw error;
  }
};

// Process all <script type="text/rip"> tags in the document
processAllRipScripts = function() {
  var i, len, script, scripts;
  scripts = document.querySelectorAll('script[type="text/rip"]');
  for (i = 0, len = scripts.length; i < len; i++) {
    script = scripts[i];
    processRipScript(script);
  }
};

// ==============================================================================
// Auto-run tag processor if we're in a browser with tags
// ==============================================================================
if (typeof document !== 'undefined') {
  // Auto-run when DOM is ready (only if there are actually tags to process)
  autoRun = function() {
    // Only auto-run if there are <script type="text/rip"> tags
    if (document.querySelector('script[type="text/rip"]')) {
      return processAllRipScripts();
    }
  };
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', autoRun);
  } else {
    // DOM already loaded, check and run immediately
    autoRun();
  }
}

// ==============================================================================
// Exports
// ==============================================================================

// Export individual functions
export { run, load, processRipScript, processAllRipScripts };

// Default export with all functionality
export default {compile, run, load, processRipScript, processAllRipScripts};
