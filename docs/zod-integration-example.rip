# ðŸŽ¯ Zod Integration Example - Using Generated Schemas in Rip Server
# This shows how to replace manual validation with generated schemas

import { Hono } from 'hono'
import { zValidator } from '@hono/zod-validator'

# Import our generated schemas
import { UserSchema, OrderSchema, SpecimenSchema, ResultSchema } from './types/complete-schemas'

app = new Hono

# ====== ENHANCED AUTH ROUTES ======
authRouter = new Hono

# Instead of manual validation, use generated schema
authRouter.post '/signup', zValidator('json', UserSchema.pick({
  email: true
  firstName: true
  lastName: true
  phone: true
  sex: true
  dob: true
})), (c) ->
  data = c.req.valid 'json'
  # data is now fully type-safe based on our schema!

  user = db.insert(users).values({
    email: data.email
    firstName: data.firstName
    lastName: data.lastName
    phone: data.phone
    sex: data.sex
    dob: data.dob
    admin: false
  }).returning().get!

  c.json { user }

# ====== ENHANCED USER ROUTES ======
userRouter = new Hono

# Update user with partial validation
userRouter.patch '/me', zValidator('json', UserSchema.partial().pick({
  firstName: true
  lastName: true
  phone: true
  shippingAddress: true
})), (c) ->
  mockUserId = 1
  data = c.req.valid 'json'

  # Type-safe update
  updatedUser = db.update(users)
    .set(data)
    .where(eq(users.id, mockUserId))
    .returning()
    .get!

  c.json { user: updatedUser }

# ====== ENHANCED ORDER ROUTES ======
orderRouter = new Hono

# Create order with validation
orderRouter.post '/', zValidator('json', z.object({
  items: z.array(z.object({
    testId: z.number()
    quantity: z.number().min(1).max(10)
    name: z.string()
  }))
  payment: z.string()
})), (c) ->
  mockUserId = 1
  data = c.req.valid 'json'

  # Calculate totals
  subtotal = data.items.reduce ((sum, item) -> sum + (item.testId * 10000)), 0

  # Use generated OrderSchema for creation
  orderData = OrderSchema.parse({
    id: undefined  # Auto-generated
    userId: mockUserId
    number: 'LAB-' + Date.now().toString(36).toUpperCase()
    payment: data.payment
    subtotal: subtotal
    total: subtotal
    meta: { items: data.items }
  })

  order = db.insert(orders).values(orderData).returning().get!
  c.json { order }

# ====== ENHANCED SPECIMEN ROUTES (NEW!) ======
specimenRouter = new Hono

# Register specimen with validation
specimenRouter.post '/register', zValidator('json', SpecimenSchema.pick({
  barcode: true
  testId: true
})), (c) ->
  mockUserId = 1
  data = c.req.valid 'json'

  specimen = db.insert(specimens).values({
    userId: mockUserId
    testId: data.testId
    barcode: data.barcode
    registeredAt: new Date()
  }).returning().get!

  c.json { specimen }

# Get user specimens
specimenRouter.get '/', (c) ->
  mockUserId = 1

  userSpecimens = db.select().from(specimens)
    .where(eq(specimens.userId, mockUserId))
    .all!

  # Validate response with schema
  validatedSpecimens = userSpecimens.map (s) -> SpecimenSchema.parse(s)
  c.json { specimens: validatedSpecimens }

app.route '/auth', authRouter
app.route '/user', userRouter
app.route '/orders', orderRouter
app.route '/specimens', specimenRouter

export default app