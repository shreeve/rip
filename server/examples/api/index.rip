# Advanced API Example
# Shows the power of the revolutionary server with a full API

import { Hono } from 'hono'

app = new Hono

# In-memory data store (each worker has its own)
users = [
  { id: 1, name: 'Alice', email: 'alice@example.com' }
  { id: 2, name: 'Bob', email: 'bob@example.com' }
]

# Middleware for JSON content type
app.use '*', (c, next) ->
  c.header 'Content-Type', 'application/json'
  await next()

# API Routes
app.get '/', (c) ->
  c.json
    message: 'Revolutionary RIP API Server'
    version: '2.0.0'
    worker: process.pid
    endpoints: [
      'GET /'
      'GET /users'
      'POST /users'
      'GET /users/:id'
      'PUT /users/:id'
      'DELETE /users/:id'
    ]

# Get all users
app.get '/users', (c) ->
  c.json
    users: users
    count: users.length
    worker: process.pid

# Get single user
app.get '/users/:id', (c) ->
  id = parseInt(c.req.param('id'))
  user = users.find (u) -> u.id == id

  if user
    c.json user
  else
    c.json { error: 'User not found' }, 404

# Create user
app.post '/users', async (c) ->
  body = await c.req.json()

  user =
    id: users.length + 1
    name: body.name
    email: body.email

  users.push user

  c.json user, 201

# Update user
app.put '/users/:id', async (c) ->
  id = parseInt(c.req.param('id'))
  body = await c.req.json()

  userIndex = users.findIndex (u) -> u.id == id

  if userIndex != -1
    users[userIndex] = { ...users[userIndex], ...body }
    c.json users[userIndex]
  else
    c.json { error: 'User not found' }, 404

# Delete user
app.delete '/users/:id', (c) ->
  id = parseInt(c.req.param('id'))
  userIndex = users.findIndex (u) -> u.id == id

  if userIndex != -1
    deletedUser = users.splice(userIndex, 1)[0]
    c.json { deleted: deletedUser }
  else
    c.json { error: 'User not found' }, 404

# Stats endpoint
app.get '/stats', (c) ->
  c.json
    worker_pid: process.pid
    uptime: process.uptime()
    memory: process.memoryUsage()
    users_count: users.length
    timestamp: new Date().toISOString()

export default app