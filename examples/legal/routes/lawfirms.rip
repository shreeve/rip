# Lawfirms route using Drizzle ORM and Faker
import { Hono } from 'hono'
import { z } from 'zod'
import { zValidator } from '@hono/zod-validator'
import { faker } from '@faker-js/faker'
import { db, lawfirmsTable } from '../db/schema.ts'
import { eq } from 'drizzle-orm'

router = new Hono

# Schema for creating/updating a law firm
lawfirmSchema = z.object
  name: z.string().min(1, "Name is required")
  email: z.string().email().optional()
  phone: z.string().optional()
  address: z.string().optional()
  city: z.string().optional()
  state: z.string().optional()
  zip: z.string().optional()

# GET all law firms
router.get '/', (c) ->
  firms = await db.select().from(lawfirmsTable).all()
  c.json firms

# GET a specific law firm by ID
router.get '/:id', (c) ->
  id = parseInt c.req.param('id')
  firm = await db.select().from(lawfirmsTable).where(eq(lawfirmsTable.id, id)).get()

  if firm
    c.json firm
  else
    c.json { error: "Law firm not found" }, 404

# POST - Create a new law firm (with optional faker data)
router.post '/', zValidator('json', lawfirmSchema), (c) ->
  data = c.req.valid('json')

  # If only name is provided, generate fake data for other fields
  if Object.keys(data).length == 1 and data.name
    data.email = faker.internet.email()
    data.phone = faker.phone.number()
    data.address = faker.location.streetAddress()
    data.city = faker.location.city()
    data.state = faker.location.state({ abbreviated: true })
    data.zip = faker.location.zipCode()

  result = await db.insert(lawfirmsTable).values(data).returning().get()
  c.json result, 201

# POST - Generate random law firm with faker
router.post '/generate', (c) ->
  firmData =
    name: faker.company.name() + " Law Firm"
    email: faker.internet.email()
    phone: faker.phone.number()
    address: faker.location.streetAddress()
    city: faker.location.city()
    state: faker.location.state({ abbreviated: true })
    zip: faker.location.zipCode()

  result = await db.insert(lawfirmsTable).values(firmData).returning().get()
  c.json result, 201

# PUT - Update a law firm
router.put '/:id', zValidator('json', lawfirmSchema.partial()), (c) ->
  id = parseInt c.req.param('id')
  data = c.req.valid('json')

  result = await db.update(lawfirmsTable)
    .set(data)
    .where(eq(lawfirmsTable.id, id))
    .returning()
    .get()

  if result
    c.json result
  else
    c.json { error: "Law firm not found" }, 404

# DELETE a law firm
router.delete '/:id', (c) ->
  id = parseInt c.req.param('id')

  result = await db.delete(lawfirmsTable)
    .where(eq(lawfirmsTable.id, id))
    .returning()
    .get()

  if result
    c.json { message: "Law firm deleted", firm: result }
  else
    c.json { error: "Law firm not found" }, 404

export default router