# ðŸš€ Rip API Server
# Simple Hono-based API that works seamlessly with rip-server

import { Hono } from 'hono'

# Create the Hono application
app = new Hono

# Basic success route with timestamp
app.get '/', (c) ->
  c.json
    success: true
    timestamp: new Date().toISOString()
    message: "ðŸš€ Rip API has PERFECT LOGGING!"
    server: "enterprise-grade-architecture"

# Health check route (optional but good practice)
app.get '/health', (c) ->
  c.json
    status: 'healthy'
    timestamp: new Date().toISOString()
    service: 'rip-api'

# API info route
app.get '/info', (c) ->
  c.json
    name: 'Rip API Server'
    version: '1.0.0'
    framework: 'Hono'
    runtime: 'Bun'
    worker: process.pid

# Lawfirms API with validation
import { z } from 'zod'
import { zValidator } from '@hono/zod-validator'
import { faker } from '@faker-js/faker'
import { drizzle } from 'drizzle-orm/bun-sqlite'
import { Database } from 'bun:sqlite'
import { sql, eq } from 'drizzle-orm'

# Import schema
import schema from './db/schema.rip'

# Create database connection
sqlite = new Database './db/data.duckdb'
db = drizzle sqlite, { schema }

# Create a sub-app for lawfirms
lawfirmsApp = new Hono

# Schema for creating/updating a law firm
lawfirmSchema = z.object
  name: z.string().min(1, "Name is required")
  email: z.string().email().optional()
  phone: z.string().optional()
  address: z.string().optional()
  city: z.string().optional()
  state: z.string().optional()
  zip: z.string().optional()

# GET all law firms
lawfirmsApp.get '/', (c) ->
  try
    firms = db.select().from(schema.lawfirms).all!
    c.json
      firms: firms
      count: firms.length
      message: 'Law firms retrieved successfully'
  catch error
    c.json { error: 'Failed to retrieve law firms', details: error.message }, 500

# POST - Generate random law firm with faker
lawfirmsApp.post '/generate', (c) ->
  firmData =
    name: faker.company.name() + " Law Firm"
    email: faker.internet.email()
    phone: faker.phone.number()
    address: faker.location.streetAddress()
    city: faker.location.city()
    state: faker.location.state({ abbreviated: true })
    zip: faker.location.zipCode()

  try
    result = db.insert(schema.lawfirms).values(firmData).returning().get!
    c.json result, 201
  catch error
    c.json { error: 'Failed to create law firm', details: error.message }, 500

# Mount the lawfirms routes
app.route '/api/lawfirms', lawfirmsApp

# Determine what to export based on context
exportValue = if import.meta.main
  # Running directly - start the server
  console.log "ðŸš€ Starting Rip API Server..."

  server = Bun.serve({
    port: 3000
    fetch: app.fetch.bind(app)
  })

  console.log "ðŸ“¡ Rip API Server running at http://localhost:#{server.port}"

  # Export simple object to prevent Bun auto-server detection
  { message: "Server started manually" }
else
  # Being imported by rip-server - export the Hono app
  app

# Single export statement at top level
export default exportValue