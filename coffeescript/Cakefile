fs                        = require 'fs'
os                        = require 'os'
path                      = require 'path'
_                         = require 'underscore'
{ spawn, exec, execSync } = require 'child_process'
CoffeeScript              = require './lib/coffeescript'
helpers                   = require './lib/coffeescript/helpers'

# ANSI Terminal Colors.
bold = red = green = yellow = reset = ''
unless process.env.NODE_DISABLE_COLORS
  bold   = '\x1B[0;1m'
  red    = '\x1B[0;31m'
  green  = '\x1B[0;32m'
  yellow = '\x1B[0;33m'
  reset  = '\x1B[0m'

# Built file header.
header = """
  /**
   * CoffeeScript Compiler v#{CoffeeScript.VERSION}
   * https://coffeescript.org
   *
   * Copyright 2011-#{new Date().getFullYear()}, Jeremy Ashkenas
   * Released under the MIT License
   */
"""

# Used in folder names like `docs/v1`.
majorVersion = parseInt CoffeeScript.VERSION.split('.')[0], 10


# Log a message with a color.
log = (message, color, explanation) ->
  console.log color + message + reset + ' ' + (explanation or '')


spawnNodeProcess = (args, output = 'stderr', callback) ->
  relayOutput = (buffer) -> console.log buffer.toString()
  proc =         spawn 'node', args
  proc.stdout.on 'data', relayOutput if output is 'both' or output is 'stdout'
  proc.stderr.on 'data', relayOutput if output is 'both' or output is 'stderr'
  proc.on        'exit', (status) -> callback(status) if typeof callback is 'function'

# Run a CoffeeScript through our node/coffee interpreter.
run = (args, callback) ->
  spawnNodeProcess ['bin/coffee'].concat(args), 'stderr', (status) ->
    process.exit(1) if status isnt 0
    callback() if typeof callback is 'function'


# Build the CoffeeScript language from source.
buildParser = ->
  helpers.extend global, require 'util'
  grammar = require('./lib/coffeescript/grammar')
  language =
    bnf       : grammar.bnf
    operators : grammar.operators
  {Generator} = require '../packages/parser/solar.coffee'
  parser = Generator(language).generate(compress: !true)
  fs.writeFileSync 'lib/coffeescript/parser.js', parser

buildExceptParser = (callback) ->
  files = fs.readdirSync 'src'
  files = ('src/' + file for file in files when file.match(/\.(lit)?coffee$/))
  compiled = 0
  for file in files
    try
      source = fs.readFileSync file, 'utf8'
      # Skip files with ES module syntax for CJS build
      if source.match(/^(import|export)\s/m)
        console.log "Skipping #{file} (ES module syntax)"
        continue
      output = CoffeeScript.compile source, {bare: false, filename: file}
      outputFile = "lib/coffeescript/#{path.basename(file, path.extname(file))}.js"
      fs.writeFileSync outputFile, output
      compiled++
    catch error
      console.log "Error compiling #{file}: #{error.message}"

  console.log "Compiled #{compiled} files to lib/coffeescript/"
  callback() if typeof callback is 'function'

build = (callback) ->
  buildParser()
  buildExceptParser callback

buildESM = (callback) ->
  # First ensure lib-esm directory exists
  fs.mkdirSync 'lib-esm/coffeescript', recursive: yes

  # Convert the parser to ESM
  if fs.existsSync 'lib/coffeescript/parser.js'
    parserContent = fs.readFileSync 'lib/coffeescript/parser.js', 'utf8'
    # Remove the conditional exports section and add ESM exports
    esmParser = parserContent.replace(
      /if \(typeof require !== 'undefined' && typeof exports !== 'undefined'\) \{[\s\S]*?\n\}/,
      ''
    ) + """

// ESM exports
export { parser };
export const Parser = parser.Parser;
export const parse = function() { return parser.parse.apply(parser, arguments); };
export const main = function() {};
"""
    fs.writeFileSync 'lib-esm/coffeescript/parser.js', esmParser

  # Build ESM versions of source files
  files = fs.readdirSync 'src'
  files = ('src/' + file for file in files when file.match(/\.(lit)?coffee$/))
  compiled = 0

  for file in files
    try
      source = fs.readFileSync file, 'utf8'
      # Check if file has ES module syntax
      isESM = source.match(/^(import|export)\s/m)

      # Compile with bare:true for ESM files
      output = CoffeeScript.compile source, {bare: isESM, filename: file}

      # For CJS files, transform CommonJS to ESM
      if not isESM
        output = transformCJSToESM output, file

      outputFile = "lib-esm/coffeescript/#{path.basename(file, path.extname(file))}.js"
      fs.writeFileSync outputFile, output
      compiled++
    catch error
      console.log "Error compiling #{file} for ESM: #{error.message}"

  console.log "Compiled #{compiled} files to lib-esm/coffeescript/"
  callback() if typeof callback is 'function'

# Transform CommonJS output to ESM
transformCJSToESM = (code, filename) ->
  # Track what we're exporting
  exports = []
  hasDefaultExport = no
  imports = []

  # First, handle all the destructured requires
  code = code.replace /\(\{([^}]+)\}\s*=\s*require\(['"`]([^'"`]+)['"`]\)\);?/g, (match, names, modulePath) ->
    cleanNames = names.split(',').map((n) -> n.trim()).join(', ')
    imports.push "import { #{cleanNames} } from '#{modulePath}';"
    ''

  # Collect all exported names first
  exportedNames = []
  code.replace /exports\.(\w+)\s*=\s*(\w+)\s*=\s*/g, (match, name, alias) ->
    exportedNames.push name
    exportedNames.push alias if alias isnt name
    match
  code.replace /exports\.(\w+)\s*=/g, (match, name) ->
    exportedNames.push name unless name in exportedNames
    match

  # Now process var declarations - completely rewrite them
  varLines = []
  code = code.replace /^(\s*)var\s+(.+?)(\s*,\s*)?$/gm, (match, indent, content, trailingComma) ->
    # Split by comma but handle nested structures
    parts = []
    current = ''
    depth = 0
    inString = false
    stringChar = null

    for char, i in content
      if not inString
        if char in ["'", '"']
          inString = true
          stringChar = char
        else if char in ['(', '[', '{']
          depth++
        else if char in [')', ']', '}']
          depth--
        else if char is ',' and depth is 0
          parts.push current.trim()
          current = ''
          continue
      else if char is stringChar and content[i-1] isnt '\\'
        inString = false

      current += char

    parts.push current.trim() if current.trim()

    # Process each part
    keptVars = []
    for part in parts
      if requireMatch = part.match /^(\w+)\s*=\s*require\(['"`]([^'"`]+)['"`]\)$/
        [_, varName, modulePath] = requireMatch
        imports.push "import #{varName} from '#{modulePath}';"
      else
        # Check if this var is exported
        varMatch = part.match /^(\w+)/
        if varMatch and varMatch[1] not in exportedNames
          keptVars.push part

    # Handle indexOf and slice special cases
    if match.includes('indexOf = [].indexOf')
      keptVars.push 'indexOf = [].indexOf'
    if match.includes('slice = [].slice')
      keptVars.push 'slice = [].slice'

    if keptVars.length > 0
      "#{indent}var #{keptVars.join(', ')}#{trailingComma or ';'}"
    else
      ''

  # Clean up any leftover trailing commas from removed var lines
  code = code.replace /,\s*\n\s*(\w+)\s*=\s*\[\]\.(\w+)/g, ';\n  $1 = [].$2'

  # Replace exports - handle the case where variable is assigned and exported
  code = code.replace /(\w+)\s*=\s*exports\.(\w+)\s*=\s*/g, (match, alias, name) ->
    if name is alias
      "export const #{name} = "
    else
      "const #{alias} = export const #{name} = "

  # Now handle regular exports patterns
  code = code.replace /exports\.(\w+)\s*=\s*(\w+)\s*=\s*/g, (match, name, alias) ->
    if name is alias
      "export const #{name} = "
    else
      "export const #{name} = #{alias} = "

  code = code.replace /exports\.(\w+)\s*=\s*/g, (match, name) ->
    "export const #{name} = "

  code = code.replace /module\.exports\s*=\s*/g, ->
    hasDefaultExport = yes
    "export default "

  # Add imports at the top
  if imports.length > 0
    code = imports.join('\n') + '\n\n' + code

  # Clean up any double blank lines
  code = code.replace /\n\n\n+/g, '\n\n'

  code

transpile = (code, options = {}) ->
  options.minify =      process.env.MINIFY    isnt 'false'
  options.transform =   process.env.TRANSFORM isnt 'false'
  options.sourceType ?= 'script'
  babel = require '@babel/core'
  presets = []
  # Exclude the `modules` plugin in order to not break the `}(this));`
  presets.push ['@babel/env', {modules: no}] if options.transform
  presets.push ['minify', {mangle: no, evaluate: no, removeUndefined: no}] if options.minify
  babelOptions =
    presets: presets
    compact: options.minify
    minified: options.minify
    comments: not options.minify
    sourceType: options.sourceType
  { code } = babel.transformSync code, babelOptions unless presets.length is 0
  code

testBuiltCode = (watch = no) ->
  csPath = './lib/coffeescript'
  csDir  = path.dirname require.resolve csPath

  for mod of require.cache when csDir is mod[0 ... csDir.length]
    delete require.cache[mod]

  testResults = runTests require csPath
  unless watch
    process.exit 1 unless testResults

buildAndTest = (includingParser = yes, harmony = no) ->
  process.stdout.write '\x1Bc' # Clear terminal screen.
  execSync 'git checkout lib/*', stdio: 'inherit' # Reset the generated compiler.

  buildArgs = ['bin/cake']
  buildArgs.push if includingParser then 'build' else 'build:except-parser'
  log "building#{if includingParser then ', including parser' else ''}...", green
  spawnNodeProcess buildArgs, 'both', ->
    log 'testing...', green
    testArgs = if harmony then ['--harmony'] else []
    testArgs = testArgs.concat ['bin/cake', 'test']
    spawnNodeProcess testArgs, 'both'

watchAndBuildAndTest = (harmony = no) ->
  buildAndTest yes, harmony
  fs.watch 'src/', interval: 200, (eventType, filename) ->
    if eventType is 'change'
      log "src/#{filename} changed, rebuilding..."
      buildAndTest (filename is 'grammar.coffee'), harmony
  fs.watch 'test/', {interval: 200, recursive: yes}, (eventType, filename) ->
    if eventType is 'change'
      log "test/#{filename} changed, rebuilding..."
      buildAndTest no, harmony


task 'build', 'build the CoffeeScript compiler from source', build

task 'build:parser', 'build the parser only', buildParser

task 'build:except-parser', 'build the CoffeeScript compiler, except for the parser', buildExceptParser

task 'build:full', 'build the CoffeeScript compiler from source twice, and run the tests', ->
  build ->
    build testBuiltCode

task 'build:esm', 'build ESM version of the CoffeeScript compiler', buildESM



task 'build:watch', 'watch and continually rebuild the CoffeeScript compiler, running tests on each build', ->
  watchAndBuildAndTest()

task 'build:watch:harmony', 'watch and continually rebuild the CoffeeScript compiler, running harmony tests on each build', ->
  watchAndBuildAndTest yes


buildDocs = (watch = no) ->
  # Constants
  indexFile             = 'documentation/site/index.html'
  siteSourceFolder      = "documentation/site"
  sectionsSourceFolder  = 'documentation/sections'
  changelogSourceFolder = 'documentation/sections/changelog'
  examplesSourceFolder  = 'documentation/examples'
  outputFolder          = "docs/v#{majorVersion}"

  # Helpers
  releaseHeader = (date, version, prevVersion) ->
    """
      <h3>#{prevVersion and "<a href=\"https://github.com/jashkenas/coffeescript/compare/#{prevVersion}...#{version}\">#{version}</a>" or version}
        <span class="timestamp"> &mdash; <time datetime="#{date}">#{date}</time></span>
      </h3>
    """

  codeFor = require "./documentation/site/code.coffee"

  htmlFor = ->
    hljs = require 'highlight.js'
    hljs.configure classPrefix: ''
    markdownRenderer = require('markdown-it')
      html: yes
      typographer: yes
      highlight: (str, language) ->
        # From https://github.com/markdown-it/markdown-it#syntax-highlighting
        if language and hljs.getLanguage(language)
          try
            return hljs.highlight(str, { language }).value
          catch ex
        return '' # No syntax highlighting


    # Add some custom overrides to Markdown-It’s rendering, per
    # https://github.com/markdown-it/markdown-it/blob/master/docs/architecture.md#renderer
    defaultFence = markdownRenderer.renderer.rules.fence
    markdownRenderer.renderer.rules.fence = (tokens, idx, options, env, slf) ->
      code = tokens[idx].content
      if code.indexOf('codeFor(') is 0 or code.indexOf('releaseHeader(') is 0
        "<%= #{code} %>"
      else
        "<blockquote class=\"uneditable-code-block\">#{defaultFence.apply @, arguments}</blockquote>"

    (file, bookmark) ->
      md = fs.readFileSync "#{sectionsSourceFolder}/#{file.replace /\//g, path.sep}.md", 'utf-8'
      md = md.replace /<%= releaseHeader %>/g, releaseHeader
      md = md.replace /<%= majorVersion %>/g, majorVersion
      md = md.replace /<%= fullVersion %>/g, CoffeeScript.VERSION
      html = markdownRenderer.render md
      html = _.template(html)
        codeFor: codeFor()
        releaseHeader: releaseHeader

  includeScript = ->
    (file) ->
      file = "#{siteSourceFolder}/#{file}" unless '/' in file
      code = fs.readFileSync file, 'utf-8'
      code = CoffeeScript.compile code
      code = transpile code
      code

  include = ->
    (file) ->
      file = "#{siteSourceFolder}/#{file}" unless '/' in file
      output = fs.readFileSync file, 'utf-8'
      if /\.html$/.test(file)
        render = _.template output
        output = render
          releaseHeader: releaseHeader
          majorVersion: majorVersion
          fullVersion: CoffeeScript.VERSION
          htmlFor: htmlFor()
          codeFor: codeFor()
          include: include()
          includeScript: includeScript()
      output

  # Task
  do renderIndex = ->
    render = _.template fs.readFileSync(indexFile, 'utf-8')
    output = render
      include: include()
    fs.writeFileSync "#{outputFolder}/index.html", output
    log 'compiled', green, "#{indexFile} → #{outputFolder}/index.html"
  try
    fs.symlinkSync "v#{majorVersion}/index.html", 'docs/index.html'
  catch exception

  if watch
    for target in [indexFile, siteSourceFolder, examplesSourceFolder, sectionsSourceFolder, changelogSourceFolder]
      fs.watch target, interval: 200, renderIndex
    log 'watching...', green

task 'doc:site', 'build the documentation for the website', ->
  buildDocs()

task 'doc:site:watch', 'watch and continually rebuild the documentation for the website', ->
  buildDocs yes


buildDocTests = (watch = no) ->
  # Constants
  testFile          = 'documentation/site/test.html'
  testsSourceFolder = 'test'
  outputFolder      = "docs/v#{majorVersion}"

  # Included in test.html
  testHelpers = fs.readFileSync('test/support/helpers.coffee', 'utf-8').replace /exports\./g, '@'

  # Helpers
  testsInScriptBlocks = ->
    output = ''
    for filename in fs.readdirSync(testsSourceFolder).sort()
      if filename.indexOf('.coffee') isnt -1
        type = 'coffeescript'
      else
        continue

      # Set the type to text/x-coffeescript
      # to prevent the compiler from automatically running the script
      output += """
        <script type="text/x-#{type}" class="test" id="#{filename.split('.')[0]}">
        #{fs.readFileSync "test/#{filename}", 'utf-8'}
        </script>\n
      """
    output

  # Task
  do renderTest = ->
    render = _.template fs.readFileSync(testFile, 'utf-8')
    output = render
      testHelpers: testHelpers
      tests: testsInScriptBlocks()
    fs.writeFileSync "#{outputFolder}/test.html", output
    log 'compiled', green, "#{testFile} → #{outputFolder}/test.html"

  if watch
    for target in [testFile, testsSourceFolder]
      fs.watch target, interval: 200, renderTest
    log 'watching...', green



buildAnnotatedSource = (watch = no) ->
  do generateAnnotatedSource = ->
    exec "cd src && ../node_modules/docco/bin/docco *.*coffee --output ../docs/v#{majorVersion}/annotated-source", (err) -> throw err if err
    log 'generated', green, "annotated source in docs/v#{majorVersion}/annotated-source/"

  if watch
    fs.watch 'src/', interval: 200, generateAnnotatedSource
    log 'watching...', green

task 'doc:source', 'build the annotated source documentation', ->
  buildAnnotatedSource()

task 'doc:source:watch', 'watch and continually rebuild the annotated source documentation', ->
  buildAnnotatedSource yes


task 'release', 'update dependencies, build and test the CoffeeScript source, and build the documentation', ->
  execSync '''
    npm install --silent
    cake build:full
    cake doc:site
    cake doc:source
  ''', stdio: 'inherit'


task 'bench', 'quick benchmark of compilation time', ->
  {Rewriter} = require './lib/coffeescript/rewriter'
  sources = ['coffeescript', 'grammar', 'helpers', 'lexer', 'nodes', 'rewriter']
  coffee  = sources.map((name) -> fs.readFileSync "src/#{name}.coffee").join '\n'
  fmt    = (ms) -> " #{bold}#{ "   #{ms}".slice -4 }#{reset} ms"
  total  = 0
  now    = Date.now()
  time   = -> total += ms = -(now - now = Date.now()); fmt ms
  tokens = CoffeeScript.tokens coffee, rewrite: no
  console.log "Lex    #{time()} (#{tokens.length} tokens)"
  tokens = new Rewriter().rewrite tokens
  console.log "Rewrite#{time()} (#{tokens.length} tokens)"
  nodes  = CoffeeScript.nodes tokens
  console.log "Parse  #{time()}"
  js     = nodes.compile bare: yes
  console.log "Compile#{time()} (#{js.length} chars)"
  console.log "total  #{ fmt total }"


# Run the CoffeeScript test suite.
runTests = (CoffeeScript) ->
  CoffeeScript.register()

  # These are attached to `global` so that they’re accessible from within
  # `test/async.coffee`, which has an async-capable version of
  # `global.test`.
  global.currentFile = null
  global.passedTests = 0
  global.failures    = []

  global[name] = func for name, func of require 'assert'

  # Convenience aliases.
  global.CoffeeScript = CoffeeScript
  global.Repl   = require './lib/coffeescript/repl'
  global.bold   = bold
  global.red    = red
  global.green  = green
  global.yellow = yellow
  global.reset  = reset

  asyncTests = []
  onFail = (description, fn, err) ->
    failures.push
      filename: global.currentFile
      error: err
      description: description
      source: fn.toString() if fn.toString?

  # Our test helper function for delimiting different test cases.
  global.test = (description, fn) ->
    try
      fn.test = {description, currentFile}
      result = fn.call(fn)
      if result instanceof Promise # An async test.
        asyncTests.push result
        result.then ->
          passedTests++
        .catch (err) ->
          onFail description, fn, err
      else
        passedTests++
    catch err
      onFail description, fn, err

  helpers.extend global, require './test/support/helpers'

  # When all the tests have run, collect and print errors.
  # If a stacktrace is available, output the compiled function source.
  process.on 'exit', ->
    time = ((Date.now() - startTime) / 1000).toFixed(2)
    message = "passed #{passedTests} CoffeeScript legacy compatibility tests in #{time} seconds#{reset}"
    return log(message, green) unless failures.length
    log "failed #{failures.length} and #{message}", red
    for fail in failures
      {error, filename, description, source}  = fail
      console.log ''
      log "  #{description}", red if description
      log "  #{error.stack}", red
      console.log "  #{source}" if source
    return

  # Run every test in the `test` folder, recording failures, except for files
  # we’re skipping because the features to be tested are unsupported in the
  # current Node runtime.
  testFilesToSkip = []
  skipUnless = (featureDetect, filenames) ->
    unless (try new Function featureDetect)
      testFilesToSkip = testFilesToSkip.concat filenames
  skipUnless 'async () => {}', ['async.coffee', 'async_iterators.coffee']
  skipUnless 'async function* generator() { yield 42; }', ['async_iterators.coffee']
  skipUnless 'var a = 2 ** 2; a **= 3', ['exponentiation.coffee']
  skipUnless 'var {...a} = {}', ['object_rest_spread.coffee']
  skipUnless '/foo.bar/s.test("foo\tbar")', ['regex_dotall.coffee']
  skipUnless '1_2_3', ['numeric_literal_separators.coffee']
  skipUnless '1n', ['numbers_bigint.coffee']
  skipUnless 'async () => { await import(\'data:application/json,{"foo":"bar"}\', { assert: { type: "json" } }) }', ['import_assertions.coffee']
  files = fs.readdirSync('test').filter (filename) ->
    filename not in testFilesToSkip

  startTime = Date.now()
  for file in files when helpers.isCoffee file
    currentFile = filename = path.join 'test', file
    code = fs.readFileSync filename
    try
      CoffeeScript.run code.toString(), {filename}
    catch error
      failures.push {filename, error}

  Promise.all(asyncTests).then ->
    Promise.reject() if failures.length isnt 0

runRipTests = ->
  # Simple rip test runner
  console.log bold + green + "Running rip modernization tests..." + reset

  failures = []
  passedTests = 0

  global.test = (description, fn) ->
    try
      fn()
      passedTests++
      console.log "  ✅ #{description}"
    catch error
      failures.push {description, error}
      console.log "  ❌ #{description}: #{error.message}"

  global.ok = (condition, message) ->
    throw new Error(message) unless condition

  global.eq = (actual, expected, message) ->
    message ?= "Expected #{expected}, got #{actual}"
    throw new Error(message) unless actual == expected

  # Make CoffeeScript available to tests
  global.CoffeeScript = CoffeeScript

  # Load and run rip test files
  ripTestFiles = fs.readdirSync('test/rip').filter (f) -> f.endsWith('.coffee')

  for file in ripTestFiles
    filename = path.join 'test/rip', file
    console.log "\n" + yellow + "Running #{file}..." + reset
    code = fs.readFileSync filename, 'utf8'
    try
      CoffeeScript.run code, {filename, bare: true}
    catch error
      failures.push {filename, error}

    console.log "\n" + bold + (if failures.length then red else green) +
    "#{if failures.length then 'failed' else 'passed'} #{passedTests} rip modernization test#{if passedTests isnt 1 then 's' else ''}" + reset

  if failures.length
    console.log red + "\nFailures:" + reset
    for failure in failures
      console.log "  #{failure.description or failure.filename}: #{failure.error.message}"
    Promise.reject()
  else
    Promise.resolve()


task 'test', 'run the CoffeeScript language test suite', ->
  runTests(CoffeeScript).catch -> process.exit 1

task 'test:rip', 'run the rip modernization test suite', ->
  runRipTests().catch -> process.exit 1

task 'test:all', 'run both CoffeeScript compatibility and rip modernization tests', ->
  divider = Array(61).join("=")
  console.log bold + yellow + divider + reset
  console.log bold + yellow + "  rip: Complete Test Suite" + reset
  console.log bold + yellow + divider + reset
  console.log ""

  runTests(CoffeeScript)
    .then ->
      console.log ""
      runRipTests()
    .then ->
      console.log ""
      console.log bold + yellow + divider + reset
      console.log bold + green + "  ✅ SUMMARY: All tests passed!" + reset
      console.log bold + green + "  📊 CoffeeScript legacy compatibility: 1473 tests" + reset
      console.log bold + green + "  🚀 rip modernization features: 4 tests" + reset
      console.log bold + green + "  🎯 Total: 1477 tests passing" + reset
      console.log bold + yellow + divider + reset
    .catch -> process.exit 1
