// Generated by CoffeeScript 2.7.0
// Rip Grammar for Solar Parser Generator
// Uses string-based actions that Solar can process
var binOp, grammar, o, unOp;

o = function(pattern, action = "$$ = $1") {
  return [pattern, action];
};

binOp = function(ripOp, jsOp = ripOp) {
  return o(`Expression ${ripOp} Expression`, `$$ = {type: 'op', op: '${jsOp}', left: $1, right: $3}`);
};

unOp = function(ripOp, jsOp = ripOp) {
  return o(`${ripOp} Expression`, `$$ = {type: 'unary', op: '${jsOp}', expr: $2}`);
};

grammar = {
  // Operator precedence (from lowest to highest)
  operators: [["right", "=", "+=", "-=", "*=", "/="], ["left", "or", "||"], ["left", "and", "&&"], ["left", "==", "!=", "is", "isnt"], ["left", "<", ">", "<=", ">=", "in", "of"], ["left", "+", "-"], ["left", "*", "/", "%"], ["right", "!", "not", "typeof"], ["left", ".", "?.", "[", "]"], ["left", "CALL"]],
  bnf: {
    Root: [o("Body", "$$ = $1")],
    Body: [o("Line", "$$ = [$1]"), o("Body TERMINATOR Line", "$1.push($3); $$ = $1"), o("Body TERMINATOR", "$$ = $1")],
    Line: [o("Expression", "$$ = $1"), o("Statement", "$$ = $1"), o("", "$$ = null")],
    Statement: [o("Return", "$$ = $1"), o("Throw", "$$ = $1"), o("Break", "$$ = $1"), o("Continue", "$$ = $1"), o("Import", "$$ = $1"), o("Export", "$$ = $1")],
    Expression: [o("Value", "$$ = $1"), o("Assign", "$$ = $1"), o("Operation", "$$ = $1"), o("Code", "$$ = $1"), o("If", "$$ = $1"), o("For", "$$ = $1"), o("While", "$$ = $1"), o("Try", "$$ = $1")],
    Value: [o("Literal", "$$ = $1"), o("Identifier", "$$ = $1"), o("ThisProperty", "$$ = $1"), o("Array", "$$ = $1"), o("Object", "$$ = $1"), o("Parenthetical", "$$ = $1"), o("Range", "$$ = $1"), o("Invocation", "$$ = $1"), o("Member", "$$ = $1")],
    Literal: [o("NUMBER", "$$ = {type: 'num', val: $1}"), o("STRING", "$$ = {type: 'str', val: $1}"), o("BOOL", "$$ = {type: 'bool', val: $1}"), o("NULL", "$$ = {type: 'null'}"), o("UNDEFINED", "$$ = {type: 'undef'}"), o("REGEX", "$$ = {type: 'regex', val: $1}")],
    Identifier: [o("IDENTIFIER", "$$ = {type: 'id', name: $1}")],
    ThisProperty: [o("@ IDENTIFIER", "$$ = {type: 'prop', obj: {type: 'this'}, prop: {type: 'id', name: $2}}")],
    Member: [o("Value . PROPERTY", "$$ = {type: 'prop', obj: $1, prop: {type: 'id', name: $3}}"), o("Value ?. PROPERTY", "$$ = {type: 'prop', obj: $1, prop: {type: 'id', name: $3}, optional: true}"), o("Value [ Expression ]", "$$ = {type: 'index', obj: $1, index: $3}"), o("Value ?[ Expression ]", "$$ = {type: 'index', obj: $1, index: $3, optional: true}")],
    Array: [o("[ ]", "$$ = {type: 'array', items: []}"), o("[ ArgList ]", "$$ = {type: 'array', items: $2}"), o("[ ArgList , ]", "$$ = {type: 'array', items: $2}")],
    Object: [o("{ }", "$$ = {type: 'object', props: []}"), o("{ PropList }", "$$ = {type: 'object', props: $2}"), o("{ PropList , }", "$$ = {type: 'object', props: $2}")],
    PropList: [o("Property", "$$ = [$1]"), o("PropList , Property", "$$ = $1.concat($3)"), o("PropList TERMINATOR Property", "$$ = $1.concat($3)")],
    Property: [o("IDENTIFIER : Expression", "$$ = {key: {type: 'id', name: $1}, val: $3}"), o("STRING : Expression", "$$ = {key: {type: 'str', val: $1}, val: $3}"), o("[ Expression ] : Expression", "$$ = {key: $2, val: $4, computed: true}"), o("IDENTIFIER", "$$ = {key: {type: 'id', name: $1}, val: {type: 'id', name: $1}, shorthand: true}")],
    Range: [o("[ Expression .. Expression ]", "$$ = {type: 'range', from: $2, to: $4, exclusive: false}"), o("[ Expression ... Expression ]", "$$ = {type: 'range', from: $2, to: $4, exclusive: true}")],
    Assign: [o("Assignable = Expression", "$$ = {type: 'assign', target: $1, value: $3}"), o("Assignable = INDENT Expression OUTDENT", "$$ = {type: 'assign', target: $1, value: $4}"), o("Assignable += Expression", "$$ = {type: 'assign', target: $1, value: $3, op: '+='}"), o("Assignable -= Expression", "$$ = {type: 'assign', target: $1, value: $3, op: '-='}"), o("Assignable *= Expression", "$$ = {type: 'assign', target: $1, value: $3, op: '*='}"), o("Assignable /= Expression", "$$ = {type: 'assign', target: $1, value: $3, op: '/='}")],
    Assignable: [o("Identifier", "$$ = $1"), o("Member", "$$ = $1"), o("ThisProperty", "$$ = $1")],
    // Binary and unary operations
    Operation: [binOp("+"), binOp("-"), binOp("*"), binOp("/"), binOp("%"), binOp("**"), binOp("=="), binOp("!="), binOp("<"), binOp(">"), binOp("<="), binOp(">="), binOp("and", "&&"), binOp("or", "||"), binOp("is", "==="), binOp("isnt", "!=="), binOp("in"), binOp("of"), binOp("instanceof"), unOp("!"), unOp("not", "!"), unOp("-"), unOp("+"), unOp("typeof"), unOp("delete"), o("Expression ++", "$$ = {type: 'update', op: '++', expr: $1, prefix: false}"), o("Expression --", "$$ = {type: 'update', op: '--', expr: $1, prefix: false}"), o("++ Expression", "$$ = {type: 'update', op: '++', expr: $2, prefix: true}"), o("-- Expression", "$$ = {type: 'update', op: '--', expr: $2, prefix: true}"), o("Expression ? Expression : Expression", "$$ = {type: 'ternary', test: $1, then: $3, else: $5}")],
    Invocation: [o("Value ( )", "$$ = {type: 'call', func: $1, args: []}"), o("Value ( ArgList )", "$$ = {type: 'call', func: $1, args: $3}"), o("Value ?( )", "$$ = {type: 'call', func: $1, args: [], optional: true}"), o("Value ?( ArgList )", "$$ = {type: 'call', func: $1, args: $3, optional: true}")],
    ArgList: [o("Expression", "$$ = [$1]"), o("ArgList , Expression", "$$ = $1.concat($3)")],
    Code: [o("-> Block", "$$ = {type: 'func', params: [], body: $2, bound: false}"), o("=> Block", "$$ = {type: 'func', params: [], body: $2, bound: true}"), o("ParamList -> Block", "$$ = {type: 'func', params: $1, body: $3, bound: false}"), o("ParamList => Block", "$$ = {type: 'func', params: $1, body: $3, bound: true}")],
    ParamList: [o("( )", "$$ = []"), o("( Params )", "$$ = $2"), o("Param", "$$ = [$1]")],
    Params: [o("Param", "$$ = [$1]"), o("Params , Param", "$$ = $1.concat($3)")],
    Param: [o("IDENTIFIER", "$$ = {type: 'param', name: $1}"), o("IDENTIFIER = Expression", "$$ = {type: 'param', name: $1, default: $3}"), o("... IDENTIFIER", "$$ = {type: 'param', name: $2, rest: true}")],
    If: [o("IF Expression Block", "$$ = {type: 'if', test: $2, then: $3}"), o("IF Expression Block ELSE Block", "$$ = {type: 'if', test: $2, then: $3, else: $5}"), o("IF Expression Block ELSE IF Expression Block", "$$ = {type: 'if', test: $2, then: $3, else: {type: 'if', test: $5, then: $7}}"), o("Expression IF Expression", "$$ = {type: 'if', test: $3, then: $1, postfix: true}"), o("Expression UNLESS Expression", "$$ = {type: 'if', test: $3, then: $1, invert: true, postfix: true}")],
    For: [o("FOR IDENTIFIER IN Expression Block", "$$ = {type: 'for-in', var: $2, iter: $4, body: $5}"), o("FOR IDENTIFIER OF Expression Block", "$$ = {type: 'for-of', var: $2, iter: $4, body: $5}"), o("Expression FOR IDENTIFIER IN Expression", "$$ = {type: 'for-in', var: $3, iter: $5, body: $1, postfix: true}")],
    While: [o("WHILE Expression Block", "$$ = {type: 'while', test: $2, body: $3}"), o("UNTIL Expression Block", "$$ = {type: 'while', test: $2, body: $3, invert: true}"), o("LOOP Block", "$$ = {type: 'while', test: {type: 'bool', val: 'true'}, body: $2}")],
    Try: [o("TRY Block", "$$ = {type: 'try', body: $2}"), o("TRY Block CATCH IDENTIFIER Block", "$$ = {type: 'try', body: $2, param: $4, handler: $5}"), o("TRY Block FINALLY Block", "$$ = {type: 'try', body: $2, finalizer: $4}")],
    Return: [o("RETURN", "$$ = {type: 'return'}"), o("RETURN Expression", "$$ = {type: 'return', val: $2}")],
    Throw: [o("THROW Expression", "$$ = {type: 'throw', arg: $2}")],
    Break: [o("BREAK", "$$ = {type: 'break'}")],
    Continue: [o("CONTINUE", "$$ = {type: 'continue'}")],
    Import: [o("IMPORT STRING", "$$ = {type: 'import', source: $2}"), o("IMPORT IDENTIFIER FROM STRING", "$$ = {type: 'import', default: $2, source: $4}"), o("IMPORT { ImportList } FROM STRING", "$$ = {type: 'import', specs: $3, source: $6}"), o("IMPORT * AS IDENTIFIER FROM STRING", "$$ = {type: 'import', namespace: $4, source: $6}")],
    ImportList: [o("IDENTIFIER", "$$ = [{imported: $1, local: $1}]"), o("IDENTIFIER AS IDENTIFIER", "$$ = [{imported: $1, local: $3}]"), o("ImportList , IDENTIFIER", "$$ = $1.concat([{imported: $3, local: $3}])"), o("ImportList , IDENTIFIER AS IDENTIFIER", "$$ = $1.concat([{imported: $3, local: $5}])")],
    Export: [o("EXPORT Expression", "$$ = {type: 'export', val: $2}"), o("EXPORT DEFAULT Expression", "$$ = {type: 'export', val: $3, default: true}"), o("EXPORT { ExportList }", "$$ = {type: 'export', specs: $3}")],
    ExportList: [o("IDENTIFIER", "$$ = [{local: $1, exported: $1}]"), o("IDENTIFIER AS IDENTIFIER", "$$ = [{local: $1, exported: $3}]"), o("ExportList , IDENTIFIER", "$$ = $1.concat([{local: $3, exported: $3}])"), o("ExportList , IDENTIFIER AS IDENTIFIER", "$$ = $1.concat([{local: $3, exported: $5}])")],
    Block: [o("INDENT Body OUTDENT", "$$ = $2"), o("Expression", "$$ = [$1]")],
    Parenthetical: [o("( Expression )", "$$ = $2")]
  },
  start: "Root"
};

export default grammar;

export {
  grammar
};
