# Rip Parser - Orchestrates parser generation using Solar
# This module loads the grammar and generates/exports the parser

import Solar from './solar.rip'
import { grammar } from './grammar.rip'

# Generate the parser using Solar
generateParser = ->
  try
    # Create parser generator
    generator = new Solar.Generator(grammar, {
      debug: false
    })

    # Create the parser
    parser = generator.createParser()

    # Add parse helper function
    parser.parseSource = (source, options = {}) ->
      # This expects tokens from the lexer
      # The lexer should set up the parser.lexer interface
      @parse(source)

    parser

  catch error
    console.error "Failed to generate parser:", error.message
    throw error

# Create and export the parser
export parser = generateParser()

# Export the Parser class
export Parser = parser.Parser

# Convenience parse function
export parse = (tokens, options = {}) ->
  parser.lexer = {
    tokens: tokens
    pos: 0
    yytext: ''
    yylineno: 0
    yylloc: {}

    setInput: (tokens) ->
      @tokens = tokens
      @pos = 0

    lex: ->
      token = @tokens[@pos++]
      if token
        @yytext = token[1] or ''
        @yylineno = token[2] or 0
        @yylloc = {
          first_line: token[2] or 0
          first_column: token[3] or 0
          last_line: token[2] or 0
          last_column: (token[3] or 0) + (token[1]?.length or 0)
        }
        # Return the token type for the parser
        token[0]
      else
        'EOF'

    showPosition: ->
      "Line #{@yylineno}"

    upcomingInput: ->
      ''
  }

  parser.lexer.setInput(tokens)
  parser.parse()

# Export default parser
export default parser