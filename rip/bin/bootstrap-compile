#!/usr/bin/env bun

/**
 * Bootstrap Compiler for Rip
 *
 * During bootstrap, this tool:
 * 1. Compiles Rip code using CoffeeScript (since Rip is similar)
 * 2. Converts the ES5 output to ES6/ESM
 *
 * Usage: bootstrap-compile <input.rip> [output.js] [--esm]
 */

import { spawnSync } from 'child_process';
import { readFileSync, writeFileSync, unlinkSync, existsSync } from 'fs';
import { resolve, dirname, basename, extname } from 'path';
import { tmpdir } from 'os';

const args = process.argv.slice(2);

if (args.length === 0) {
  console.log(`
Bootstrap Compiler for Rip

This tool helps during the bootstrap phase by:
1. Compiling .rip files using CoffeeScript
2. Converting the ES5 output to modern ES6/ESM

Usage:
  bootstrap-compile <input.rip> [output.js] [options]

Options:
  --no-esm    Disable ES module conversion (ESM is enabled by default)
  --no-clean  Keep the intermediate ES5 file
  --verbose   Show detailed compilation steps

Examples:
  bootstrap-compile lexer.rip                     # Creates lexer.js with ESM
  bootstrap-compile lexer.rip lexer.js --no-esm   # Creates without ESM
  bootstrap-compile src/*.rip --verbose           # Compile with details
`);
  process.exit(0);
}

const inputFile = resolve(args[0]);
const inputName = basename(inputFile, extname(inputFile));
const outputFile = args[1] && !args[1].startsWith('--')
  ? resolve(args[1])
  : resolve(dirname(inputFile), inputName + '.js');

const options = {
  esm: !args.includes('--no-esm'),  // ESM is now default, use --no-esm to disable
  verbose: args.includes('--verbose'),
  noClean: args.includes('--no-clean')
};

// Create temp file for CoffeeScript output
const tempFile = resolve(tmpdir(), `rip-bootstrap-${Date.now()}.js`);

function log(...args) {
  if (options.verbose) {
    console.log('[bootstrap]', ...args);
  }
}

async function compile() {
  try {
    // Step 1: Check if input file exists
    if (!existsSync(inputFile)) {
      throw new Error(`Input file not found: ${inputFile}`);
    }

    log(`Compiling ${basename(inputFile)} with CoffeeScript...`);

    // Step 2: Compile with CoffeeScript
    const coffeeResult = spawnSync('coffee', [
      '--compile',
      '--bare',
      '--output', dirname(tempFile),
      '--print',
      inputFile
    ], {
      encoding: 'utf8',
      shell: true
    });

    if (coffeeResult.error) {
      // CoffeeScript might not be installed globally, try with bunx
      log('Global coffee not found, trying with bunx...');

      const bunxResult = spawnSync('bunx', [
        'coffeescript@latest',
        '--compile',
        '--bare',
        '--print',
        inputFile
      ], {
        encoding: 'utf8'
      });

      if (bunxResult.error || bunxResult.status !== 0) {
        throw new Error(`CoffeeScript compilation failed: ${bunxResult.stderr || bunxResult.error}`);
      }

      // Write bunx output to temp file
      writeFileSync(tempFile, bunxResult.stdout);
    } else if (coffeeResult.status !== 0) {
      throw new Error(`CoffeeScript compilation failed: ${coffeeResult.stderr}`);
    } else {
      // Write coffee output to temp file
      writeFileSync(tempFile, coffeeResult.stdout);
    }

    log(`ES5 code generated at ${tempFile}`);

    // Step 3: Convert ES5 to ES6
    log('Converting ES5 to ES6...');

    const es5to6Result = spawnSync(resolve(dirname(inputFile), '../bin/es5-to-es6'), [
      tempFile,
      outputFile,
      options.esm ? '--esm' : ''
    ].filter(Boolean), {
      encoding: 'utf8'
    });

    if (es5to6Result.error || es5to6Result.status !== 0) {
      throw new Error(`ES6 conversion failed: ${es5to6Result.stderr || es5to6Result.error}`);
    }

    // Step 4: Clean up temp file
    if (!options.noClean && existsSync(tempFile)) {
      unlinkSync(tempFile);
      log('Cleaned up temporary files');
    }

    console.log(`✅ Successfully compiled ${basename(inputFile)} → ${basename(outputFile)}`);

    if (options.esm) {
      console.log('   Module format: ES6/ESM');
    }

  } catch (error) {
    console.error('❌ Compilation failed:', error.message);

    // Clean up on error
    if (!options.noClean && existsSync(tempFile)) {
      unlinkSync(tempFile);
    }

    process.exit(1);
  }
}

compile();
