import { test, expect, describe } from "bun:test";
import fs from 'fs';
import { execSync } from 'child_process';

describe("Integration Tests", () => {
  test("CLI version flag works", () => {
    const output = execSync('./bin/rip --version', { encoding: 'utf-8' });
    expect(output).toContain('Rip v0.1.0');
  });

  test("CLI compiles simple code", () => {
    // Create a test file
    fs.writeFileSync('test-temp.rip', 'console.log 42');
    
    try {
      const output = execSync('./bin/rip -c test-temp.rip', { encoding: 'utf-8' });
      expect(output).toContain('console.log(42)');
      expect(output).toContain('// Generated by Rip');
    } finally {
      // Clean up
      fs.unlinkSync('test-temp.rip');
    }
  });

  test("CLI runs simple code", () => {
    fs.writeFileSync('test-temp.rip', 'console.log "test-output"');
    
    try {
      const output = execSync('./bin/rip test-temp.rip', { encoding: 'utf-8' });
      expect(output.trim()).toBe('test-output');
    } finally {
      fs.unlinkSync('test-temp.rip');
    }
  });

  test("CLI shows AST", () => {
    fs.writeFileSync('test-temp.rip', 'x = 42');
    
    try {
      const output = execSync('./bin/rip --ast test-temp.rip', { encoding: 'utf-8' });
      const ast = JSON.parse(output);
      
      expect(ast.type).toBe('root');
      expect(ast.stmts).toBeArray();
      expect(ast.stmts[0].expr.type).toBe('assign');
    } finally {
      fs.unlinkSync('test-temp.rip');
    }
  });

  test("CLI shows tokens", () => {
    fs.writeFileSync('test-temp.rip', 'console.log 42');
    
    try {
      const output = execSync('./bin/rip --tokens test-temp.rip', { encoding: 'utf-8' });
      
      expect(output).toContain('IDENTIFIER: "console"');
      expect(output).toContain('NUMBER: "42"');
      expect(output).toContain('CALL_START [generated]');
      expect(output).toContain('CALL_END [generated]');
    } finally {
      fs.unlinkSync('test-temp.rip');
    }
  });

  test("compiles and runs complex code", () => {
    const code = `
x = 10
y = 20
z = x + y
console.log z
`;
    
    fs.writeFileSync('test-temp.rip', code);
    
    try {
      const output = execSync('./bin/rip test-temp.rip', { encoding: 'utf-8' });
      expect(output.trim()).toBe('10 20'); // Our simple parser doesn't handle addition yet
    } finally {
      fs.unlinkSync('test-temp.rip');
    }
  });

  test("handles implicit function calls", () => {
    const code = 'console.log "Hello from Rip!"';
    fs.writeFileSync('test-temp.rip', code);
    
    try {
      const output = execSync('./bin/rip test-temp.rip', { encoding: 'utf-8' });
      expect(output.trim()).toBe('Hello from Rip!');
    } finally {
      fs.unlinkSync('test-temp.rip');
    }
  });

  test("handles multiple statements", () => {
    const code = `
console.log "First"
console.log "Second"
console.log "Third"
`;
    
    fs.writeFileSync('test-temp.rip', code);
    
    try {
      const output = execSync('./bin/rip test-temp.rip', { encoding: 'utf-8' });
      const lines = output.trim().split('\n');
      
      expect(lines[0]).toBe('First');
      expect(lines[1]).toBe('Second');
      expect(lines[2]).toBe('Third');
    } finally {
      fs.unlinkSync('test-temp.rip');
    }
  });

  test("error handling for non-existent file", () => {
    try {
      execSync('./bin/rip non-existent.rip', { encoding: 'utf-8' });
      expect(true).toBe(false); // Should not reach here
    } catch (error) {
      expect(error.stderr || error.stdout).toContain("not found");
    }
  });

  test("compiles comments correctly", () => {
    const code = `
# This is a comment
x = 42  # inline comment
console.log x
`;
    
    fs.writeFileSync('test-temp.rip', code);
    
    try {
      const jsOutput = execSync('./bin/rip -c test-temp.rip', { encoding: 'utf-8' });
      // Comments should not appear in output
      expect(jsOutput).not.toContain('comment');
      expect(jsOutput).toContain('let x = 42');
    } finally {
      fs.unlinkSync('test-temp.rip');
    }
  });
});