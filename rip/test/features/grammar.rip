# Comprehensive Grammar Tests
# Testing all major grammar rules to ensure coverage

test = (name, fn) ->
  console.log "  ✓ #{name}" if fn()
  console.log "  ✗ #{name}" unless fn()

assert = (condition) -> condition

console.log "\n📐 Grammar Structure Tests:\n"

# ==========================================
# Root/Body/Line Structure
# ==========================================

console.log "🏗️ Basic Structure:"

test "empty program compiles", ->
  # Empty line should parse
  assert true

test "single expression line", ->
  x = 42
  assert x is 42

test "multiple lines with terminators", ->
  a = 1
  b = 2
  c = 3
  assert a + b + c is 6

# ==========================================
# Statements (can't be expressions)
# ==========================================

console.log "\n📝 Statements:"

test "return statement", ->
  getValue = -> 
    return 42
    0  # should never reach
  assert getValue() is 42

test "return without value", ->
  noReturn = ->
    x = 1
    return
    x = 2
  assert noReturn() is undefined

test "throw statement", ->
  shouldThrow = ->
    try
      throw new Error("test error")
      false
    catch e
      true
  assert shouldThrow()

test "break in loop", ->
  result = 0
  for i in [1, 2, 3, 4, 5]
    break if i is 3
    result += i
  assert result is 3  # 1 + 2

test "continue in loop", ->
  result = 0
  for i in [1, 2, 3, 4, 5]
    continue if i is 3
    result += i
  assert result is 12  # 1 + 2 + 4 + 5

# Note: Import/Export would need actual module context to test properly
# Skipping for now as they're compile-time features

# ==========================================
# Expressions (produce values)
# ==========================================

console.log "\n🔢 Expressions:"

test "value expression", ->
  val = 100
  assert val is 100

test "assignment expression", ->
  x = 5
  y = (x = 10)  # assignment returns value
  assert x is 10 and y is 10

test "operation expression", ->
  result = 2 + 3 * 4
  assert result is 14

test "code (function) expression", ->
  fn = -> 42
  assert typeof fn is 'function'
  assert fn() is 42

test "if expression", ->
  val = if true then 10 else 20
  assert val is 10

test "for expression (comprehension)", ->
  squares = (x * x for x in [1, 2, 3])
  assert squares[0] is 1
  assert squares[1] is 4
  assert squares[2] is 9

test "while expression", ->
  counter = 0
  result = while counter < 3
    counter += 1
  assert counter is 3

test "try expression", ->
  result = try
    JSON.parse('{"valid": true}')
  catch e
    null
  assert result?.valid is true

# ==========================================
# Values (can be assigned/called)
# ==========================================

console.log "\n💎 Values:"

test "literal - number", ->
  num = 42
  assert num is 42

test "literal - string", ->
  str = "hello"
  assert str is "hello"

test "literal - boolean", ->
  bool = true
  assert bool is true

test "literal - null", ->
  val = null
  assert val is null

test "literal - undefined", ->
  val = undefined
  assert val is undefined

test "literal - regex", ->
  pattern = /test/i
  assert pattern.test("TEST")

test "identifier", ->
  myVariable = 100
  assert myVariable is 100

test "this property (@)", ->
  obj =
    value: 42
    getValue: -> @value
  assert obj.getValue() is 42

test "array literal", ->
  arr = [1, 2, 3]
  assert arr.length is 3
  assert arr[1] is 2

test "object literal", ->
  obj = {name: "Rip", version: 2}
  assert obj.name is "Rip"
  assert obj.version is 2

test "parenthetical (grouping)", ->
  result = (2 + 3) * 4
  assert result is 20

test "range", ->
  range = [1..5]
  assert range.length is 5
  assert range[0] is 1
  assert range[4] is 5

test "invocation (function call)", ->
  add = (a, b) -> a + b
  result = add(3, 4)
  assert result is 7

test "member access - dot notation", ->
  obj = {prop: 100}
  assert obj.prop is 100

test "member access - bracket notation", ->
  obj = {key: 200}
  prop = "key"
  assert obj[prop] is 200

# ==========================================
# Complex Combinations
# ==========================================

console.log "\n🎯 Complex Grammar Combinations:"

test "chained member access", ->
  obj = 
    nested:
      deeply:
        value: 42
  assert obj.nested.deeply.value is 42

test "function returning function", ->
  outer = (x) ->
    inner = (y) -> x + y
    inner
  add5 = outer(5)
  assert add5(3) is 8

test "array of objects", ->
  items = [
    {id: 1, name: "first"}
    {id: 2, name: "second"}
  ]
  assert items[0].name is "first"
  assert items[1].id is 2

test "object with methods", ->
  calculator =
    value: 0
    add: (n) -> @value += n
    get: -> @value
  
  calculator.add(5)
  calculator.add(3)
  assert calculator.get() is 8

test "nested conditionals", ->
  getValue = (x, y) ->
    if x > 10
      if y > 10
        "both big"
      else
        "x big"
    else
      if y > 10
        "y big"
      else
        "both small"
  
  assert getValue(15, 15) is "both big"
  assert getValue(15, 5) is "x big"
  assert getValue(5, 15) is "y big"
  assert getValue(5, 5) is "both small"

test "operations with precedence", ->
  # Should respect operator precedence
  result = 2 + 3 * 4 - 5 / 5
  assert result is 13  # 2 + 12 - 1

test "compound assignments", ->
  x = 10
  x += 5
  assert x is 15
  x *= 2
  assert x is 30
  x -= 10
  assert x is 20
  x /= 4
  assert x is 5

test "optional chaining", ->
  obj = {a: {b: {c: 42}}}
  assert obj?.a?.b?.c is 42
  assert obj?.x?.y?.z is undefined

# ==========================================
# Summary
# ==========================================

console.log "\n✅ Grammar test coverage complete!"
console.log "   Testing Root, Body, Line, Statements, Expressions, and Values"
console.log ""
