# Database setup using our schema
import { drizzle } from 'drizzle-orm/bun-sqlite'
import { Database } from 'bun:sqlite'
import { join, dirname } from 'node:path'
import { fileURLToPath } from 'node:url'
import schema from './schema'

# Get the directory of this file
__dirname = dirname fileURLToPath(import.meta.url)

# Create SQLite database
dbPath = join __dirname, 'api.db'
sqlite = new Database dbPath

# Create Drizzle instance
export db = drizzle sqlite, { schema }

# Export all tables for easy access
export {
  users,
  posts,
  comments,
  categories,
  post_categories,
  settings,
  audit_logs,
  account,
  alertitem,
  lawfirms
} = schema

# Helper functions that could be added
export class BaseModel
  @tableName: null

  @all: ->
    db.select().from(@table()).all()

  @find: (id) ->
    db.select().from(@table()).where(eq(@table().id, id)).get()

  @where: (conditions) ->
    query = db.select().from(@table())
    # Add where conditions...
    query.all()

  @create: (data) ->
    db.insert(@table()).values(data).returning().get()

  @update: (id, data) ->
    db.update(@table()).set(data).where(eq(@table().id, id)).returning().get()

  @delete: (id) ->
    db.delete(@table()).where(eq(@table().id, id)).returning().get()

  @table: ->
    schema[@tableName]

# Example model
export class User extends BaseModel
  @tableName = 'users'

  @findByEmail: (email) ->
    db.select().from(users).where(eq(users.email, email)).get()

  @authenticate: (email, password) ->
    user = @findByEmail(email)
    return null unless user
    # Check password...
    user

# Usage examples:
# users = User.all()
# user = User.find(1)
# user = User.create({ name: 'John', email: 'john@example.com' })
# User.update(1, { name: 'Jane' })
# User.delete(1)